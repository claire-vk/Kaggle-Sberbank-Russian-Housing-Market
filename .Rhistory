summary(titanic.manhattan)
titanic.euclidean = kknn(age ~ ., complete_df, missing_df, k = 1, distance = 2)
summary(titanic.euclidean)
numRows(titanic_df)
sumRows(titanic_df)
dim(titanic_df)
dim(titanic_df)[1]
sqrt(dim(titanic_df)[1])
?rep
rep(1:4, 2)
titanic3[is.na(titanic3$age),] # check for possible pattern in missing data for age
titanic3[is.na(titanic3$body),] # check for possible pattern in missing data for body
plot(imputed_fare,imputed_age)
plot(imputed_age,imputed_fare)
plot(imputed_age,imputed_fare, color = pclass)
plot(imputed_age,imputed_fare, col = pclass)
plot(imputed_age,imputed_fare, col = 'pclass')
plot()
?plot
plot(imputed_age,imputed_fare, col = titanic3$pclass)
?points
points(x=c(50,10), y=c(400,100))
points(x=c(50,10), y=c(400,100), col ='blue')
points(x=c(50,10), y=c(400,100), col ='yellow')
points(x=c(50,10), y=c(400,100), col ='darkblue')
points(x=c(50,10), y=c(400,100), col ='lightblue')
points(x=c(50,10), y=c(400,100), fill ='lightblue')
points(x=c(50,10), y=c(400,100), pch = 12, fill ='lightblue')
points(x=c(50,10), y=c(400,100), pch = 10, fill ='lightblue')
points(x=c(50,10), y=c(400,100), pch = 10, col ='lightblue')
?plot
legend(2000,9.5)
legend(80,400)
legend(80,400, legend=c("age", "fare"))
legend(70,400, legend=c("age", "fare"))
points(x=c(50,10), y=c(400,100), pch = 10, col ='lightblue')
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
new_df = data.frame(age = titanic$age, fare = titanic$fare, pclass = titanic$pclass)
new_df = data.frame(age = titanic3$age, fare = titanic3$fare, pclass = titanic33pclass)
new_df = data.frame(age = titanic3$age, fare = titanic3$fare, pclass = titanic3pclass)
new_df = data.frame(age = titanic3$age, fare = titanic3$fare, pclass = titanic3$pclass)
new_df
?rbind
addition_df = dataframe(age=c(50,10), fare = c(400,100))
addition_df = data.frame(age=c(50,10), fare = c(400,100))
rowbind(new_df,addition_df)
rbind(new_df,addition_df)
addition_df = data.frame(age=c(50,10), fare = c(400,100), pclass = c(NA, NA))
rbind(new_df,addition_df)
final_df = rbind(new_df,addition_df)
tail(final_df)
summary(final_df)
imputed.1nn = predict(pre.1nn, final_df)
pre.1nn = preProcess(final_df, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, final_df)
imputed1nn
imputed.1nn
summary(imputed.1nn)
final_df$pclass = imputed.1nn
summary(imputed.1nn)
final_df
tail(final_df)
addition_df = data.frame(age=c(50,10), fare = c(400,100), pclass = rep(NA, 2))
final_df = rbind(new_df,addition_df)
summary(final_df)
pre.1nn = preProcess(final_df, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, final_df)
final_df$pclass = imputed.1nn
tail(final_df)
final_df
final_df$pclass.pclass = imputed.1nn
tail(final_df)
final_df
summary(final_df)
pre.1nn = preProcess(final_df, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, final_df)
final_df$pclass.pclass = imputed.1nn
tail(final_df)
new_df = data.frame(age = titanic3$age, fare = titanic3$fare, pclass = titanic3$pclass)
addition_df = data.frame(age=c(50,10), fare = c(400,100), pclass = rep(NA, 2))
final_df = rbind(new_df,addition_df)
final_df
summary(final_df)
pre.1nn = preProcess(final_df, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, final_df)
final_df$pclass = imputed.1nn
tail(final_df)
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
col.vec
final_df.1nn = kNN(final_df, k = 1)
final_df
final_df
final_df
final_df
summary(final_df)
final_df.1nn = kNN(final_df, k = 1)
new_df = data.frame(age = titanic3$age, fare = titanic3$fare, pclass = titanic3$pclass)
addition_df = data.frame(age=c(50,10), fare = c(400,100), pclass = rep(NA, 2))
final_df = rbind(new_df,addition_df)
final_df
summary(final_df)
final_df.1nn = kNN(final_df, k = 1)
summary(final_df.1nn)
summary(titanic3)
sqrt(dim(final_df)[1])
final_df.36nn = kNN(final_df, k = 36)
summary(titanic3)
summary(final_df.36nn)
new_df2 = data.frame(titanic3$pclass,titanic3$survived,titanic3$sex,
titanic3$age,titanic3$sibsp,titanic3$parch,imputed.fare)
names(new_df2) = c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch','fare')
df3 = data.frame(titanic3$pclass,titanic3$survived,titanic3$sex,titanic3$age,titanic3$sibsp,titanic3$parch,imputed.fare)
names(df3) = c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch','fare')
imputed.fare = Hmisc::impute(titanic3$fare, "random")
new_df2 = data.frame(titanic3$pclass,titanic3$survived,titanic3$sex,
titanic3$age,titanic3$sibsp,titanic3$parch,imputed.fare)
names(new_df2) = c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch','fare')
#summary(new_df2) #there are only missing values in age, so you can use complete cases
complete_df = new_df2[complete.cases(new_df2), ]
missing_df = new_df2[is.na(new_df2$age), -4]
titanic.manhattan = kknn(age ~ ., complete_df, missing_df, k = 1, distance = 1)
titanic.manhattan
?plot
density(titanic3$age)
?density
ggplot(titanic3, aes(fare)) + geom_density()
ggplot(final_df, aes(imputed_fare)) + geom_density()
ggplot(titanic.euclidean, aes(imputed_fare)) + geom_density()
lines(density(titanic3$age), col= "darkblue")
lines(density(titanic.d10$fitted.values), col= "red")
summary(titanic.manhattan)
titanic.euclidean = kknn(age ~ ., complete_df, missing_df, k = 1, distance = 2)
summary(titanic.euclidean)
titanic.d10 = kknn(age ~ ., complete_df, missing_df, k = 1, distance = 10)
summary(titanic.d10)
plot(density(titanic.euclidean$fitted.values), col = "green")
lines(density(titanic.manhattan$fitted.values), col= "blue")
lines(density(titanic.d10$fitted.values), col= "red")
lines(density(titanic3$age), col= "darkblue")
lines(density(final_df$age), col= "darkblue")
lines(density(complete_df$age), col= "darkblue")
n = sqrt(dim(complete_df)[1]) # n is 36
n
lines(density(titanic.d10_32$fitted.values), col= "red")
lines(density(complete_df$age), col= "darkblue")
titanic.manhattan_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 1)
summary(titanic.manhattan)
titanic.euclidean_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 2)
summary(titanic.euclidean)
titanic.d10_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 10)
summary(titanic.d10)
plot(density(titanic.euclidean_32$fitted.values), col = "green")
lines(density(titanic.manhattan_32$fitted.values), col= "blue")
lines(density(titanic.d10_32$fitted.values), col= "red")
lines(density(complete_df$age), col= "darkblue")
plot(density(titanic.euclidean$fitted.values), col = "green")
lines(density(titanic.manhattan$fitted.values), col= "blue")
lines(density(titanic.d10$fitted.values), col= "red")
lines(density(complete_df$age), col= "darkblue")
sqrt(dim(complete_df)[1]) # n is 32
titanic.manhattan_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 1)
summary(titanic.manhattan)
titanic.euclidean_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 2)
summary(titanic.euclidean)
titanic.d10_32 = kknn(age ~ ., complete_df, missing_df, k = 32, distance = 10)
summary(titanic.d10)
plot(density(titanic.euclidean_32$fitted.values), col = "green")
lines(density(titanic.manhattan_32$fitted.values), col= "blue")
lines(density(titanic.d10_32$fitted.values), col= "red")
lines(density(complete_df$age), col= "darkblue")
plot(density(titanic.euclidean$fitted.values), col = "green")
lines(density(titanic.manhattan$fitted.values), col= "blue")
lines(density(titanic.d10$fitted.values), col= "red")
lines(density(complete_df$age), col= "darkblue")
top_feat = c("full_sq", "life_sq", "build_year", "year_month", "floor", "additional_education_km", "catering_km",
"big_church_km", "public_healthcare_km", "railroad_km", "ID_metro", "preschool_km", "industrial_km",
"radiation_km", "big_road1_km", "public_transport_station_km", "cemetery_km",
"swim_pool_km", "green_zone_km", "big_road2_km", "hospice_morgue_km", "fitness_km",
"kindergarten_km", "max_floor", "extra_sq", "green_part_1000", "ratio_life_sq_full_sq",
"age_house", "ratio_kitch_sq_full_sq", "ratio_preschool", "ratio_floor_max_floor",
"sales_per_month", "ratio_kitch_sq_life_sq", "kitch_sq", "floor_from_top",
"preschool_quota", "month", "sub_area", "area_m", "state", "pop_density_raion",
"full_all", "ratio_school", "ekder_all", "num_room", "school_quota",
"retire_proportion", "raion_popul", "year", 'price_doc')
cat_feat = c("build_year", "year_month", "floor", "max_floor", "extra_sq", "month",
"sub_area", "state", "num_room", "school_quota",
"retire_proportion", "raion_popul")
top_feat -  cat_feat
ggplot(df_bind, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
scale_color_manual(labels = c("linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
library(dplyr)
library(ggplot2)
setwd('/Users/clairevignon/DataScience/NYC_DSA/project3_ML_kaggle')
linear = read.csv("prediction_train_lnr.csv", stringsAsFactors = FALSE)
rf = read.csv("prediction_train_rf.csv", stringsAsFactors = FALSE)
rf_2 = read.csv("prediction_train_rf_2.csv", stringsAsFactors = FALSE)
train = read.csv("input/train_cleaned.csv", stringsAsFactors = FALSE)
train = train[!is.na(train$full_sq),]
df = cbind(linear, rf, rf_2, train)
linear$label = rep("lnr",dim(linear)[1])
rf$label = rep("rf",dim(rf)[1])
rf_2$label = rep("rf_2",dim(rf_2)[1])
train_2 = train$price_doc
linear_1 = linear
rf_1 = rf
rf_2a = rf_2
colnames(linear_1) <- c("price", "label")
colnames(rf_1) <- c("price", "label")
colnames(rf_2a) <- c("price", "label")
df_bind = rbind(linear_1, rf_1, rf_2a)
df_bind = cbind(df_bind, train_2) # add column wih actual price
colnames(df_bind) <- c("price", "label", "price_doc")
ggplot(df, aes(price_doc, price_linear)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "red")
ggplot(df, aes(price_doc, price_rf)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "red")
ggplot(df, aes(price_doc, price_rf_2)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "red")
rf_lnr_plot = filter(df_bind, label %in% c("rf", "lnr"))
ggplot(rf_lnr_plot, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
rf_x2_plot = filter(df_bind, label %in% c("rf", "rf_2"))
ggplot(rf_x2_plot, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "grey") +
# scale_color_manual(labels = c("RF mtry: 53", "RF mtry: 12")) +
scale_alpha(guide = 'none')
ggplot(df_bind, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
scale_color_manual(labels = c("linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
ggplot(df_bind, aes(price_doc, price, color = label, alpha = 0.05)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
scale_color_manual(labels = c("Linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
# scale_color_manual(labels = c("Linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
ggplot(df_bind, aes(price_doc, price, color = label, alpha = 0.05)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
# scale_color_manual(labels = c("Linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
ggplot(rf_x2_plot, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_color_manual(labels = c("RF mtry: 53", "RF mtry: 12"), values=c("#E69F00", "#56B4E9")) +
scale_alpha(guide = 'none')
ggplot(rf_lnr_plot, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
scale_color_manual(labels = c("Linear", "RF mtry: 53"), values=c("#999999", "#E69F00")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
ggplot(rf_x2_plot, aes(price_doc, price, color = label, alpha = 0.1)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_color_manual(labels = c("RF mtry: 53", "RF mtry: 12"), values=c("#E69F00", "#56B4E9")) +
scale_alpha(guide = 'none')
ggplot(df_bind, aes(price_doc, price, color = label, alpha = 0.05)) +
geom_point() +
theme(panel.background = element_blank()) +
labs(x = "Actual Price", y = "Predicted Price") +
scale_color_manual(labels = c("Linear", "RF mtry: 53", "RF mtry: 12"), values=c("#999999", "#E69F00", "#56B4E9")) +
geom_abline(slope=1, intercept=0, color = "grey") +
scale_alpha(guide = 'none')
library(car)
setwd('/Users/clairevignon/DataScience/NYC_DSA/project3_ML_kaggle')
train = read.csv("input/train_cleaned.csv", stringsAsFactors = FALSE)
test = read.csv("input/test_cleaned.csv", stringsAsFactors = FALSE)
train$price_doc = log(train$price_doc+1)
top_35_reduced = c('price_doc', "full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
top_35_reduced_noprice = c("full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
train_top35_reduced = subset(train, select= top_35_reduced)
test_top35_reduced = subset(test, select= top_35_reduced_noprice)
sum(is.na(train_top35_reduced$state)) #13559 NAs which is more than 30% of the
library(Hmisc)
train_top35_reduced$state = impute(train_top35_reduced$state, "random")
test_top35_reduced$state = impute(test_top35_reduced$state, "random")
library(dplyr)
train_top35_reduced = select(train_top35_reduced,-kitch_sq)
train_top35_reduced = train_top35_reduced[!is.na(train_top35_reduced$full_sq),]
model_2 = lm(price_doc ~ ., data = train_top35_reduced)
summary(model_2)
vif(model_2)
model_2a = update(model_2, ~ . - preschool_km - theater_km -
public_healthcare_km - sadovoe_km - swim_pool_km -
public_transport_station_km - kindergarten_km -
hospice_morgue_km - big_church_km )
summary(model_2a)
vif(model_2a)
mean(model_2a$residuals^2) # looking at mse
prediction_1 = predict(model_2a, train_top35_reduced)
prediction_1 = exp(prediction_1)-1
prediction_1 = data.frame(linearprediction=prediction_1)
write.csv(prediction_1, "prediction_train_lnr.csv", row.names=F)
prediction = data.frame(id=test$id, price_doc=prediction)
prediction_2 = predict(model_2a, test_top35_reduced)
prediction_2 = exp(prediction_2)-1
prediction_2 = data.frame(id=test$id, price_doc=prediction_2)
library(randomForest)
train_top35_reduced$sub_area = factor(train_top35_reduced$sub_area)
train_top35_reduced$state = factor(train_top35_reduced$state)
train_top35_reduced$label =rep("train", dim(train_top35_reduced)[1])
train_top35_reduced = select(train_top35_reduced, - price_doc) # removing price_doc variable
test_top35_reduced$label =rep("test", dim(test_top35_reduced)[1])
test_top35_reduced = select(test_top35_reduced, - kitch_sq) # removing the kitch_sq variable
totalData = rbind(train_top35_reduced, test_top35_reduced)
library(psych)
x = dummy.code(totalData$sub_area)
totalData = select(totalData, -sub_area)
totalData = cbind(totalData,x)
split = split(totalData , f = totalData$label)
test_top35_reduced_2 = split[[1]]
train_top35_reduced_2 = split[[2]]
test_top35_reduced_2 = select(test_top35_reduced_2, -label)
train_top35_reduced_2 = select(train_top35_reduced_2, -label)
train_top35_reduced = as.data.frame(train_top35_reduced_2, train_top35_reduced$price_doc)
test_top35_reduced = test_top35_reduced_2 # rename dataset for consistency
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = "'", replacement = "_")
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = " ", replacement = "_")
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = "-", replacement = "_")
test_top35_reduced$sub_area = factor(test_top35_reduced$sub_area)
names(test_top35_reduced)
test_top35_reduced$state = factor(test_top35_reduced$state)
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = "'", replacement = "_")
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = " ", replacement = "_")
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = "-", replacement = "_")
metric = "RMSE"
mtry = sqrt(ncol(train_top35_reduced))
rf.house_tuned = randomForest(price_doc ~ .  - preschool_km - theater_km -
public_healthcare_km - sadovoe_km - swim_pool_km -
public_transport_station_km - kindergarten_km -
hospice_morgue_km - big_church_km,
data = train_top35_reduced, importance = TRUE, mtry=mtry, metric = metric)
train_top35_reduced
names( train_top35_reduced)
dim( train_top35_reduced)
library(car)
setwd('/Users/clairevignon/DataScience/NYC_DSA/project3_ML_kaggle')
train = read.csv("input/train_cleaned.csv", stringsAsFactors = FALSE)
test = read.csv("input/test_cleaned.csv", stringsAsFactors = FALSE)
train$price_doc = log(train$price_doc+1)
top_35_reduced = c('price_doc', "full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
top_35_reduced_noprice = c("full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
train_top35_reduced = subset(train, select= top_35_reduced)
test_top35_reduced = subset(test, select= top_35_reduced_noprice)
sum(is.na(train_top35_reduced$state)) #13559 NAs which is more than 30% of the
library(Hmisc)
train_top35_reduced$state = impute(train_top35_reduced$state, "random")
test_top35_reduced$state = impute(test_top35_reduced$state, "random")
library(dplyr)
train_top35_reduced = select(train_top35_reduced,-kitch_sq)
train_top35_reduced = train_top35_reduced[!is.na(train_top35_reduced$full_sq),]
model_2 = lm(price_doc ~ ., data = train_top35_reduced)
summary(model_2)
vif(model_2)
model_2a = update(model_2, ~ . - preschool_km - theater_km -
public_healthcare_km - sadovoe_km - swim_pool_km -
public_transport_station_km - kindergarten_km -
hospice_morgue_km - big_church_km )
summary(model_2a)
vif(model_2a)
mean(model_2a$residuals^2) # looking at mse
prediction_1 = predict(model_2a, train_top35_reduced)
prediction_1 = exp(prediction_1)-1
prediction_1 = data.frame(linearprediction=prediction_1)
prediction_2 = predict(model_2a, test_top35_reduced)
prediction_2 = exp(prediction_2)-1
prediction_2 = data.frame(id=test$id, price_doc=prediction_2)
library(randomForest)
train_top35_reduced$sub_area = factor(train_top35_reduced$sub_area)
train_top35_reduced$state = factor(train_top35_reduced$state)
train_top35_reduced$label =rep("train", dim(train_top35_reduced)[1])
train_top35_reduced = select(train_top35_reduced, - price_doc) # removing price_doc variable
test_top35_reduced$label =rep("test", dim(test_top35_reduced)[1])
test_top35_reduced = select(test_top35_reduced, - kitch_sq) # removing the kitch_sq variable
totalData = rbind(train_top35_reduced, test_top35_reduced)
library(psych)
x = dummy.code(totalData$sub_area)
totalData = select(totalData, -sub_area)
totalData = cbind(totalData,x)
split = split(totalData , f = totalData$label)
test_top35_reduced_2 = split[[1]]
train_top35_reduced_2 = split[[2]]
test_top35_reduced_2 = select(test_top35_reduced_2, -label)
train_top35_reduced_2 = select(train_top35_reduced_2, -label)
train_top35_reduced_2$price_doc = train_top35_reduced$price_doc
names(train_top35_reduced_2)
train_top35_reduced_2$price_doc
train_top35_reduced$price_doc
library(car)
setwd('/Users/clairevignon/DataScience/NYC_DSA/project3_ML_kaggle')
train = read.csv("input/train_cleaned.csv", stringsAsFactors = FALSE)
test = read.csv("input/test_cleaned.csv", stringsAsFactors = FALSE)
train$price_doc = log(train$price_doc+1)
top_35_reduced = c('price_doc', "full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
top_35_reduced_noprice = c("full_sq", "kitch_sq", "state", "sub_area", "green_zone_km",
"sadovoe_km", "railroad_km", "office_km", "theater_km", "preschool_km",
"public_healthcare_km", "swim_pool_km", "big_church_km",
"public_transport_station_km", "kindergarten_km", "hospice_morgue_km")
train_top35_reduced = subset(train, select= top_35_reduced)
test_top35_reduced = subset(test, select= top_35_reduced_noprice)
sum(is.na(train_top35_reduced$state)) #13559 NAs which is more than 30% of the
library(Hmisc)
train_top35_reduced$state = impute(train_top35_reduced$state, "random")
test_top35_reduced$state = impute(test_top35_reduced$state, "random")
library(dplyr)
train_top35_reduced = select(train_top35_reduced,-kitch_sq)
train_top35_reduced = train_top35_reduced[!is.na(train_top35_reduced$full_sq),]
model_2 = lm(price_doc ~ ., data = train_top35_reduced)
summary(model_2)
vif(model_2)
model_2a = update(model_2, ~ . - preschool_km - theater_km -
public_healthcare_km - sadovoe_km - swim_pool_km -
public_transport_station_km - kindergarten_km -
hospice_morgue_km - big_church_km )
summary(model_2a)
vif(model_2a)
mean(model_2a$residuals^2) # looking at mse
prediction_1 = predict(model_2a, train_top35_reduced)
prediction_1 = exp(prediction_1)-1
prediction_1 = data.frame(linearprediction=prediction_1)
write.csv(prediction_1, "prediction_train_lnr.csv", row.names=F)
prediction_2 = predict(model_2a, test_top35_reduced)
prediction_2 = exp(prediction_2)-1
prediction_2 = data.frame(id=test$id, price_doc=prediction_2)
library(randomForest)
train_top35_reduced$sub_area = factor(train_top35_reduced$sub_area)
train_top35_reduced$state = factor(train_top35_reduced$state)
train_top35_reduced$label =rep("train", dim(train_top35_reduced)[1])
train_copy = train_top35_reduced
train_top35_reduced = select(train_top35_reduced, - price_doc) # removing price_doc variable
test_top35_reduced$label =rep("test", dim(test_top35_reduced)[1])
test_top35_reduced = select(test_top35_reduced, - kitch_sq) # removing the kitch_sq variable
totalData = rbind(train_top35_reduced, test_top35_reduced)
library(psych)
x = dummy.code(totalData$sub_area)
totalData = select(totalData, -sub_area)
totalData = cbind(totalData,x)
split = split(totalData , f = totalData$label)
test_top35_reduced_2 = split[[1]]
train_top35_reduced_2 = split[[2]]
split = split(totalData , f = totalData$label)
test_top35_reduced = split[[1]]
train_top35_reduced = split[[2]]
test_top35_reduced = select(test_top35_reduced, -label)
train_top35_reduced = select(train_top35_reduced, -label)
train_top35_reduced$price_doc = train_copy$price_doc
names(train_top35_reduced)
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = "'", replacement = "_")
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = " ", replacement = "_")
names(train_top35_reduced) = gsub(x = names(train_top35_reduced), pattern = "-", replacement = "_")
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = "'", replacement = "_")
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = " ", replacement = "_")
names(test_top35_reduced) = gsub(x = names(test_top35_reduced), pattern = "-", replacement = "_")
metric = "RMSE"
mtry = sqrt(ncol(train_top35_reduced))
rf.house_tuned = randomForest(price_doc ~ .  - preschool_km - theater_km -
public_healthcare_km - sadovoe_km - swim_pool_km -
public_transport_station_km - kindergarten_km -
hospice_morgue_km - big_church_km,
data = train_top35_reduced, importance = TRUE, mtry=mtry, metric = metric)
